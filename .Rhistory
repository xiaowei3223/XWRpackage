devtools::document()
devtools::document()
devtools::document()
load("data/GPL_bioc_package.RData")
devtools::document()
load("data/GPL_bioc_package.RData")
load("data/GPL_bioc_package.RData")
data("data/GPL_bioc_package.RData")
load("data/GPL_bioc_package.RData")
save(GPL_pkg,file = "GPL_pkg.rda")
data("data/GPL_pkg.rda")
load("data/GPL_pkg.rda")
class(GPL_pkg)
names(GPL_pkg)
devtools::document()
install.packages("roxygen2", depend=TRUE)
install.packages("roxygen2", depend = TRUE)
library(roxygen2)
roxygenize("XWRpackage")
devtools::document()
library(XWRpackage)
library(XWRpackage)
GPL_biocPackage('GPL33')
devtools::document()
q()
library(XWRpackage)
GPL_biocPackage('GPL20')
GPL_biocPackage('GPL33')
devtools::document()
load("data/GPL_pkg.rda")
devtools::document()
devtools::document()
load("data/GPL_pkg.rda")
devtools::document()
g1  <-  read.csv("data/g1_20191127.csv", header = F)
names(g1) <- c("genename", "nodelabel", "start_number", "end_number" )
g2  <-  read.csv("g2_20191127.csv", header = F)
g2  <-  read.csv("data/g2_20191127.csv", header = F)
names(g2) <- c("rs","genename", "nodelabel", "start_number", "end_number" )
g3  <-  read.csv("data/g3_20191127.csv", header = F)
names(g3) <- c("rs","genename", "nodelabel", "start_number", "end_number" )
save(g1,g2,g3 file = 'g123.RData')
save(g1,g2,g3, file = 'g123.RData')
devtools::document()
data("data/GPL_pkg.rda")
load("data/GPL_pkg.rda")
devtools::document()
devtools::document()
devtools::document()
install.packages("BiocManager")
source('D:/lab/R_project/XWRpackage/R/geo_data.R', encoding = 'UTF-8')
reload
remotes::install_github('xiaowei3223/XWRpackage')
#' GPL_ann <- Y$GPL_ann
#' pheno_Data <- Y$pheno_Data
#'
#'
#'
#'
#'
###############################################################################
# install packages
###############################################################################
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", dependencies = TRUE)
requiredPackages <- c("KEGGREST", "GSEABase")
newPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(newPackages)) BiocManager::install(newPackages, ask = TRUE)
pathway.list <- keggList("pathway", organism = "hsa")
suppressPackageStartupMessages(library(KEGGREST))
suppressPackageStartupMessages(library(GSEABase))
kegg.download <- function(pathway.list){
#因为keggGet()一次最大查询10条，所以这里先将pathway.list分成10*n个，每10个放在pathway.x中
#确定pathway.x长度
if (length(pathway.list)%%10 == 0){
pathway.x.len <- length(pathway.list)%/%10
}else{
pathway.x.len <- length(pathway.list)%/%10 + 1
}
#pathway.x,每个中包含10个pathway
pathway.x <- vector(mode = "list", length = pathway.x.len)
for (i in 1:length(pathway.x)){
min.x <- 10*(i -1)+1
max.x <- 10*i
pathway.x[[i]] <- names(pathway.list)[min.x:max.x]
rm(min.x,max.x)
}
#下载n次，每次下载10个pathway
pathway.kegg <- list()
for (i in 1:pathway.x.len){
pathway.kegg.x <- keggGet(pathway.x[[i]])
pathway.kegg <- append(pathway.kegg, pathway.kegg.x)
rm(pathway.kegg.x)
}
names(pathway.kegg) <- unlist(lapply(names(pathway.list), function(x){trimws(strsplit(x, ':', fixed = TRUE)[[1]][2])} ))
return(pathway.kegg)
}
pathway.list <- keggList("pathway", organism = "hsa")
kegg.path <- kegg.download(pathway.list = pathway.list[1:11])
pathway.list[1:11]
pathway.list <- keggList("pathway", organism = "hsa")
kegg.path <- kegg.download(pathway.list = pathway.list[1:11])
View(kegg.path)
?keggGet
??GeneSet
?GeneSet
?msigdbr
library(msigdbr)
?msigdbr
source('D:/lab/R_project/XWRpackage/R/msigdb.geneSet.R', encoding = 'UTF-8')
library(roxygen2)
roxygenize("XWRpackage")
devtools::document()
devtools::document()
?devtools::document()
devtools::document()
devtools::document()
getwd()
roxygenise("D:/lab/R_project/XWRpackage")
devtools::document()
roxygenise("D:/lab/R_project/XWRpackage")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(XWRpackage)
help(package = "XWRpackage")
library(XWRpackage)
pathway.list <- keggList("pathway", organism = "hsa")
kegg.path <- kegg.download(pathway.list = pathway.list[1:11])
install.packages("D:/lab/R_project/XWRpackage_0.1.0.tar.gz", repos = NULL, type = "source")
library(XWRpackage)
library(XWRpackage)
help(package = "XWRpackage")
library(XWRpackage)
pathway.list <- keggList("pathway", organism = "hsa")
kegg.path <- kegg.download(pathway.list = pathway.list[1:11])
kegg.geneSet <- path2geneSet(kegg.path[[1]])
hsa.geneSet <- kegg.geneSet("hsa") # Homo sapiens (human)
ptr.geneSet <- kegg.geneSet("ptr", outputfile = "ptr.gmt") # Pan troglodytes (chimpanzee)
ggo.geneSet <- kegg.geneSet("ggo") # Gorilla gorilla gorilla (western lowland gorilla)
pon.geneSet <- kegg.geneSet("pon") # Nomascus leucogenys (northern white-cheeked gibbon)
system("R CMD build XWRpackage")
library(XWRpackage)
pon.geneSet <- kegg.geneSet("pon") # Nomascus leucogenys (northern white-cheeked gibbon)
Y = geo_data("GSE2553")
devtools::document()
help(package = "XWRpackage")
help(package = "XWRpackage")
library(XWRpackage)
pathway.list <- keggList("pathway", organism = "hsa")
kegg.path <- kegg.download(pathway.list = pathway.list[1:11])
library(XWRpackage)
PATH="${RTOOLS40_HOME}\usr\bin;${PATH}"
PATH="C:\rtools40\usr\bin;${PATH}"
PATH="${RTOOLS40_HOME}\usr\bin;${C:\rtools40}"
PATH="${C:\rtools40}\usr\bin;${C:\rtools40}"
library(XWRpackage)
library(XWRpackage)
library(KEGGREST)
pathway.list <- keggList("pathway", organism = "hsa")
kegg.path <- kegg.download(pathway.list = pathway.list[1:11])
kegg.geneSet <- path2geneSet(kegg.path[[1]])
Y = geo_data("GSE2553")
devtools::document()
library(roxygen2)
roxygenise()
help("package = "XWRpackage")
help(package = "XWRpackage")
library(XWRpackage)
help(package = "XWRpackage")
library(XWRpackage)
pathway.list <- keggList("pathway", organism = "hsa")
kegg.path <- kegg.download(pathway.list = pathway.list[1:11])
Y = geo_data("GSE2553")
devtools::document()
devtools::document()
roxygenise()
devtools::check()
#'
#'
#'
#'
#'
#'
#'
#'
#'
#'
geo_data <- function(geo,geneID = 'SYMBOL'){
if (!requireNamespace("GEOquery", quietly = TRUE)){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery") }
library(GEOquery)
#获取expressionSet
GEO_data <- getGEO(geo,GSEMatrix=TRUE)
#show(GEO_data)
GEO_dataa = GEO_data[[1]]
#获取表达矩阵
exp = as.data.frame(exprs(GEO_dataa))
#获取表型数据
pd = pData(GEO_dataa)
#head(pd)
#获取GPL平台号
GPL = annotation(GEO_dataa)
#获取GPL平台号注释信息
GPL_ann = getGEO(GPL, destdir=".")
#查看平台号注释信息有哪些
cn_GPL_ann <- colnames(Table(GPL_ann))
if(geneID == 'NO'){expr_data <- exp }
else{
if (geneID == 'SYMBOL'){geneID = "(S|s)(Y|y)(M|m)(B|b)(O|o)(L|l)"}
if (geneID == 'ENTREZ'){geneID = "(E|e)(N|n)(T|t)(R|r)(E|e)(Z|z)"}
if (geneID == 'RefSeq'){geneID = "(R|r)(e|E)(f|F)(S|s)(e|E)(q|Q)"}
#找到含有目标geneID的那一列的名称
geneID2 <- grep(geneID, cn_GPL_ann, value = T, ignore.case = FALSE, fixed = FALSE)
if (length(geneID2) != 0 ){
#取对应的想要的平台号信息，比如：SYMBOL
iddata <- Table(GPL_ann)[,c('ID', geneID2)]
#将探针ID从行名变成一列
exp$ID <- rownames(exp)
#转换ID
expr_data <- merge(x= exp, y=iddata, by = "ID", all.x = T, all.y = F)
expr_data1 <- expr_data[,c("ID", geneID2)]
expr_data2 <- expr_data[!( names(expr_data) %in% c("ID", geneID2) )] #选择不是ID和指定基因ID的列
expr_data <- cbind(expr_data1,expr_data2) #合并两者
rm(expr_data1, expr_data2, exp)
}else{
expr_data <- exp}
}
#返回结果
geo_exprs_pdata <- list(expr_data, pd, GPL, GPL_ann)
names(geo_exprs_pdata) <- c("expression_data", "pheno_Data", "GPL_number", "GPL_ann")
return (geo_exprs_pdata)
}
devtools::check()
suppressPackageStartupMessages(library(msigdbr))
suppressPackageStartupMessages(library(GSEABase))
devtools::check()
#'
#'
#'
#'
#'
#'
#'
#'
#'
#'
geo_data <- function(geo,geneID = 'SYMBOL'){
if (!requireNamespace("GEOquery", quietly = TRUE)){
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GEOquery") }
library(GEOquery)
#获取expressionSet
GEO_data <- getGEO(geo,GSEMatrix=TRUE)
#show(GEO_data)
GEO_dataa = GEO_data[[1]]
#获取表达矩阵
exp = as.data.frame(exprs(GEO_dataa))
#获取表型数据
pd = pData(GEO_dataa)
#head(pd)
#获取GPL平台号
GPL = annotation(GEO_dataa)
#获取GPL平台号注释信息
GPL_ann = getGEO(GPL, destdir=".")
#查看平台号注释信息有哪些
cn_GPL_ann <- colnames(Table(GPL_ann))
if(geneID == 'NO'){expr_data <- exp }
else{
if (geneID == 'SYMBOL'){geneID = "(S|s)(Y|y)(M|m)(B|b)(O|o)(L|l)"}
if (geneID == 'ENTREZ'){geneID = "(E|e)(N|n)(T|t)(R|r)(E|e)(Z|z)"}
if (geneID == 'RefSeq'){geneID = "(R|r)(e|E)(f|F)(S|s)(e|E)(q|Q)"}
#找到含有目标geneID的那一列的名称
geneID2 <- grep(geneID, cn_GPL_ann, value = T, ignore.case = FALSE, fixed = FALSE)
if (length(geneID2) != 0 ){
#取对应的想要的平台号信息，比如：SYMBOL
iddata <- Table(GPL_ann)[,c('ID', geneID2)]
#将探针ID从行名变成一列
exp$ID <- rownames(exp)
#转换ID
expr_data <- merge(x= exp, y=iddata, by = "ID", all.x = T, all.y = F)
expr_data1 <- expr_data[,c("ID", geneID2)]
expr_data2 <- expr_data[!( names(expr_data) %in% c("ID", geneID2) )] #选择不是ID和指定基因ID的列
expr_data <- cbind(expr_data1,expr_data2) #合并两者
rm(expr_data1, expr_data2, exp)
}else{
expr_data <- exp}
}
#返回结果
geo_exprs_pdata <- list(expr_data, pd, GPL, GPL_ann)
names(geo_exprs_pdata) <- c("expression_data", "pheno_Data", "GPL_number", "GPL_ann")
return (geo_exprs_pdata)
}
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
